var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>Hello. I'm currently taking several courses that provide online self-teaching resources.</p> <p>Check all my progress and thinking process here.</p>"},{"location":"Self%20study/CMU-CS15112/index.html","title":"CMU CS15-112","text":"<p>On this page, I will record all the homework and my thinking process on the CMU CS15-112 course.</p>"},{"location":"Self%20study/CMU-CS15112/hw1.html","title":"hw1","text":""},{"location":"Self%20study/CMU-CS15112/hw1.html#part-a","title":"Part A","text":""},{"location":"Self%20study/CMU-CS15112/hw1.html#1-distancex1-y1-x2-y2-2-pts","title":"1. distance(x1, y1, x2, y2) [2 pts]","text":"<p>Write the function distance(x1, y1, x2, y2) that takes four int or float values x1, y1, x2, y2 that represent the two points (x1, y1) and (x2, y2), and returns the distance between those points as a float.</p> Python<pre><code>import math\n\ndef distance(x1, y1, x2, y2):\n    print(math.sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)))\n</code></pre>"},{"location":"Self%20study/CMU-CS15112/hw1.html#2-circlesintersectx1-y1-r1-x2-y2-r2-2-pts","title":"2. circlesIntersect(x1, y1, r1, x2, y2, r2) [2 pts]","text":"<p>Write the function circlesIntersect(x1, y1, r1, x2, y2, r2) that takes 6 numbers (ints or floats) -- x1, y1, r1, x2, y2, r2 -- that describe the circle centered at (x1,y1) with radius r1, and the circle centered at (x2,y2) with radius r2, and returns True if the two circles intersect and False otherwise.</p> Python<pre><code>import math\n\ndef circlesIntersect(x1, y1, r1, x2, y2, r2):\n    dis=math.sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2))\n    if dis&gt;(r1+r2):\n        return False\n    return True\n</code></pre>"},{"location":"Self%20study/CMU-CS15112/hw1.html#3-getinrangex-bound1-bound2-2-pts","title":"3. getInRange(x, bound1, bound2) [2 pts]","text":"<p>Write the function getInRange(x, bound1, bound2) which takes 3 int or float values -- x, bound1, and bound2, where bound1 is not necessarily less than bound2. If x is between the two bounds, just return it unmodified. Otherwise, if x is less than the lower bound, return the lower bound, or if x is greater than the upper bound, return the upper bound.</p> Python<pre><code>import math\n\ndef getInRange(x, bound1, bound2):\n    if bound1&gt;bound2: # Switch\n        t=bound1\n        bound1=bound2\n        bound2=t\n    if x&lt;bound1:\n        return bound1\n    elif x&gt;bound2:\n        return bound2\n    return x\n</code></pre>"},{"location":"Self%20study/CMU-CS15112/hw1.html#4-eggcartonseggs-2-pts","title":"4. eggCartons(eggs) [2 pts]","text":"<p>Write the function eggCartons(eggs) that takes a non-negative integer number of eggs, and returns the smallest integer number of cartons required to hold that many eggs, where a carton may hold up to 12 eggs.</p> Python<pre><code>import math\n\ndef eggCartons(eggs):\n    if int(eggs/12.0)!=eggs/12.0:\n        return int(eggs/12.0)+1\n    return int(eggs/12.0)\n</code></pre>"},{"location":"Self%20study/CMU-CS15112/hw1.html#5-pascalstrianglevaluerow-col-2-pts","title":"5. pascalsTriangleValue(row, col) [2 pts]","text":"<p>Write the function pascalsTriangleValue(row, col) that takes int values row and col, and returns the value in the given row and column of Pascal's Triangle where the triangle starts at row 0, and each row starts at column 0. If either row or col are not legal values, return None, instead of crashing. Hint: math.factorial may be helpful! Also: it may help to read MathIsFun's Pascal's Triangle page, which includes a general discussion, some nice applications, and further down the page a helpful formula.</p> Python<pre><code>import math\n\ndef pascalsTriangleValue(row, col):\n    return math.factorial(row)/(math.factorial(col)*math.factorial(row-col))\n</code></pre>"},{"location":"Self%20study/CMU-CS15112/hw1.html#6-getkthdigitn-k-5-pts","title":"6. getKthDigit(n, k) [5 pts]","text":"<p>Write the function getKthDigit(n, k) that takes a possibly-negative int n and a non-negative int k, and returns the kth digit of n, starting from 0, counting from the right.</p> Python<pre><code>import math\n\ndef getKthDigit(n, k):\n    while k&gt;0:\n        n=math.floor(n/10)\n        k-=1\n    return n%10\n</code></pre>"},{"location":"Self%20study/CMU-CS15112/hw1.html#7-setkthdigitn-k-d-5-pts","title":"7. setKthDigit(n, k, d) [5 pts]","text":"<p>Write the function setKthDigit(n, k, d) that takes three integers -- n, k, and d -- where n is a possibly-negative int, k is a non-negative int, and d is a non-negative single digit (between 0 and 9 inclusive). This function returns the number n with the kth digit replaced with d. Counting starts at 0 and goes right-to-left, so the 0<sup>th</sup> digit is the rightmost digit.</p> Python<pre><code>import math\n\ndef setKthDigit(n, k, d):\n    is_negative=n&lt;0\n    n=abs(n)\n    n_str=str(n)\n    if k&gt;=len(n_str):\n        n_str='0'*(k-len(n_str)+1)+n_str\n    # Replace the kth digit\n    n_str=n_str[::-1]  # Reverse the string for right-to-left indexing\n    n_str=n_str[:k]+str(d)+n_str[k+1:]  # Replace the kth digit\n    n_str=n_str[::-1]  # Reverse back to normal\n\n    result=int(n_str)\n    if is_negative:\n        return -result\n    return result\n</code></pre>"},{"location":"Self%20study/CMU-CS15112/hw1.html#part-b","title":"Part B","text":""},{"location":"Self%20study/CMU-CS15112/hw1.html#9-nearestoddn-10-pts","title":"9. nearestOdd(n) [10 pts]","text":"<p>Write the function nearestOdd(n) that takes an int or float n, and returns as an int value the nearest odd number to n. In the case of a tie, return the smaller odd value. Note that the result must be an int, so nearestOdd(13.0) is the int 13, and not the float 13.0.</p> Python<pre><code>import math\n\ndef nearestOdd(n):\n    if int(n)==n:\n        if n%2==0:\n            return int(n-1)\n        else:\n            return int(n)\n    else:\n        if int(n)%2==1:\n            return int(n)\n        else:\n            if n&gt;int(n):\n                return int(n)+1\n            else:\n                return int(n)-1\n</code></pre>"},{"location":"Self%20study/CMU-CS15112/hw1.html#10-numberofpoolballsrows-10-pts","title":"10. numberOfPoolBalls(rows) [10 pts]","text":"<p>Pool balls are arranged in rows where the first row contains 1 pool ball and each row contains 1 more pool ball than the previous row. Thus, for example, 3 rows contain 6 total pool balls (1+2+3). With this in mind, write the function numberOfPoolBalls(rows) that takes a non-negative int value, the number of rows, and returns another int value, the number of pool balls in that number of full rows. For example, numberOfPoolBalls(3) returns 6. We will not limit our analysis to a \"rack\" of 15 balls. Rather, our pool table can contain an unlimited number of rows. For this problem and the next, you should research Triangular Numbers. </p> Python<pre><code>import math\n\ndef numberOfPoolBalls(rows):\n    tot=0\n    for i in range(0, rows+1):\n        tot+=i\n    return tot\n</code></pre>"},{"location":"Self%20study/CMU-CS15112/hw1.html#11-numberofpoolballrowsballs-25-pts","title":"11. numberOfPoolBallRows(balls) [25 pts]","text":"<p>This problem is the inverse of the previous problem. Write the function numberOfPoolBallRows(balls) that takes a non-negative int number of pool balls, and returns the smallest int number of rows required for the given number of pool balls. Thus, numberOfPoolBallRows(6) returns 3. Note that if any balls must be in a row, then you count that row, and so numberOfPoolBallRows(7) returns 4 (since the 4<sup>th</sup> row must have a single ball in it). </p> Python<pre><code>import math\n\ndef numberOfPoolBallRows(balls):\n    t=0\n    counter=0\n    while(counter&lt;balls):\n        t+=1\n        counter+=t\n    return t\n</code></pre>"},{"location":"Self%20study/CMU-CS15112/hw1.html#12-colorblenderrgb1-rgb2-midpoints-n-25-pts","title":"12. colorBlender(rgb1, rgb2, midpoints, n) [25 pts]","text":"<p>This problem implements a color blender, inspired by this tool. In particular, we will use it with integer RGB values (it also does hex values and RGB% values, but we will not use those modes). Note that RGB values contain 3 integers, each between 0 and 255, representing the amount of red, green, and blue respectively in the given color, where 255 is \"entirely on\" and 0 is \"entirely off\".</p> <p>There are 5 colors in the palette because the first color is crimson, the last color is mint, and the middle 3 colors are equally spaced between them.</p> <p>So we could ask: if we start with crimson and go to mint, with 3 midpoints, what is color #1? The answer then would be rgb(212, 78, 95).</p> <p>One last step: we need to represent these RGB values as a single integer. To do that, we'll use the first 3 digits for red, the next 3 for green, the last 3 for blue, all in base 10 (decimal, as you are accustomed to). Hence, we'll represent crimson as the integer 220020060, and mint as the integer 189252201.</p> <p>With all that in mind, write the function colorBlender(rgb1, rgb2, midpoints, n), which takes two integers representing colors encoded as just described, a non-negative integer number of midpoints, and a non-negative integer n, and returns the nth color in the palette that the tool creates between those two colors with that many midpoints. If n is out of range (too small or too large), return None.</p> <p>For example, following the case above: colorBlender(220020060, 189252201, 3, 1) returns 212078095</p> Python<pre><code>def roundHalfUp(n):\n    import math\n    return int(math.floor(n+0.5))\n\ndef colorBlender(rgb1, rgb2, midpoints, n):\n    if n&lt;0 or n&gt;midpoints+1:\n        return None\n\n    r1=rgb1//1000000\n    g1=(rgb1//1000)%1000\n    b1=rgb1%1000\n\n    r2=rgb2//1000000\n    g2=(rgb2//1000)%1000\n    b2=rgb2%1000\n\n    steps=midpoints+1\n\n    rstep=(r2-r1)/steps\n    gstep=(g2-g1)/steps\n    bstep=(b2-b1)/steps\n\n    rn=roundHalfUp(r1+rstep*n)\n    gn=roundHalfUp(g1+gstep*n)\n    bn=roundHalfUp(b1+bstep*n)\n\n    return rn*1000000+gn*1000+bn\n</code></pre>"},{"location":"Self%20study/CMU-CS15112/hw2.html","title":"hw2","text":""},{"location":"Self%20study/CMU-CS15112/hw2.html#part-a","title":"Part A","text":""},{"location":"Self%20study/CMU-CS15112/hw2.html#1-digitcountn-2-pts","title":"1. digitCount(n) [2 pts]","text":"<p>Write the function digitCount(n) that takes a possibly-negative int and returns the number of digits in it. So, digitCount(12323) returns 5, digitCount(0) returns 1, and digitCount(-111) returns 3. One way you could do this would be to return len(str(abs(n))), but you cannot do that, since you may not use strings here! This can be solved with logarithms, but seeing as this is \"loops week\", you should instead simply repeatedly remove the ones digit until you cannot.</p> Python<pre><code>def digitCount(n):\n    if n==0:\n        return 1\n    elif n&lt;0:\n        n=-n\n    t=0\n    while n&gt;0:\n        n//=10\n        t+=1\n    return t\n</code></pre>"},{"location":"Self%20study/CMU-CS15112/hw2.html#2-gcdm-n-2-pts","title":"2. gcd(m, n) [2 pts]","text":"<p>[Note: to receive any credit, you must solve this problem using Euclid's algorithm, and by no other means. In particular, do not just loop through all integers less than min(m,n) and find the common factors that way -- it is much too slow!]</p> <p>According to Euclid, the greatest common divisor, or gcd, can be found like so:</p> Text Only<pre><code>gcd(x,y) == gcd(y, x%y)\n</code></pre> <p>We can use that to quickly find gcd's. For example:</p> Text Only<pre><code>gcd(270,250) == gcd(250, 20) # 270 % 250 == 20\n             == gcd(20, 10) # 250 % 20 == 10\n             == gcd(10, 0) # 20 % 10 == 0\n</code></pre> <p>When we get to gcd(x,0), the answer is x. So gcd(270, 250) is 10. With this in mind, write the function gcd(x,y) that takes two positive integers x and y and returns their gcd using Euclid's gcd algorithm.</p> Python<pre><code>def gcd(m, n):\n    if n==0:\n        return m\n    else:\n        return gcd(n,m%n)\n</code></pre>"},{"location":"Self%20study/CMU-CS15112/hw2.html#3-hasconsecutivedigitsn-2-pts","title":"3. hasConsecutiveDigits(n) [2 pts]","text":"<p>Write the function hasConsecutiveDigits(n) that takes a possibly- negative int value n and returns True if that number contains two consecutive digits that are the same, and False otherwise.</p> Python<pre><code>def hasConsecutiveDigits(n):\n    if n&lt;0:\n        n=-n\n    if n&lt;11:\n        return False\n    while n&gt;10:\n        if n%10==int(n/10)%10:\n            return True\n        n//=10\n    return False\n</code></pre>"},{"location":"Self%20study/CMU-CS15112/hw2.html#4-nthadditiveprimen-2-pts","title":"4. nthAdditivePrime(n) [2 pts]","text":"<p>Write the function nthAdditivePrime(n) that takes a non-negative int n and returns the nth Additive Prime, which is a prime number such that the sum of its digits is also prime. For example, 113 is prime and 1+1+3==5 and 5 is also prime, so 113 is an Additive Prime.</p> Python<pre><code>import math\n\ndef isPrime(num):\n    if num &lt; 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef nthAdditivePrime(n):\n    cnt=0\n    num=2\n    while True:\n        alt=num\n        digit_sum=0\n        while alt&gt;0:\n            digit_sum+=alt%10\n            alt//=10\n        if isPrime(num) and isPrime(digit_sum):\n            cnt+=1\n            if cnt==n:\n                return num\n        num+=1\n</code></pre>"},{"location":"Self%20study/CMU-CS15112/hw2.html#5-mostfrequentdigitn-4-pts","title":"5. mostFrequentDigit(n) [4 pts]","text":"<p>Write the function mostFrequentDigit(n), that takes a possibly-negative integer n and returns the digit from 0 to 9 that occurs most frequently in it, with ties going to the smaller digit. </p> Python<pre><code>def mostFrequentDigit(n):\n    a=[0,0,0,0,0,0,0,0,0,0]\n    while n&gt;0:\n        a[n%10]+=1\n        n//=10\n    max=0\n    ans=0\n    for i in range(10):\n        if a[i]&gt;max:\n            max=a[i]\n            ans=i\n    return ans\n</code></pre>"},{"location":"Self%20study/CMU-CS15112/hw2.html#6-isrotationx-y-4-pts","title":"6. isRotation(x, y) [4 pts]","text":"<p>Write the function isRotation(x, y) that takes two non-negative integers x and y, both guaranteed to not contain any 0's, and returns True if x is a rotation of the digits of y and False otherwise. For example, 3412 is a rotation of 1234. Any number is a rotation of itself. </p> Python<pre><code>def isRotation(x, y):\n    x_str=str(x)\n    y_str=str(y)\n    return len(x_str)==len(y_str) and y_str in (x_str+x_str)\n</code></pre>"},{"location":"Self%20study/CMU-CS15112/hw2.html#7-integralf-a-b-n-4-pts","title":"7. integral(f, a, b, N) [4 pts]","text":"<p>Background: in calculus, we use the integral of a function f from x=a to x=b to compute the area under the curve between those points (or the negative area if the function is below the x-axis). One way to approximate this area (that is, to find it without doing any actual calculus!) is by replacing the smooth function with a collection of N trapezoids, as shown in this image (from here, with N=5):</p> <p>As in that image, here we will only use uniform widths, so each of the trapezoids has a width of (b - a)/N, so that all N of them together span the width of (b - a).</p> <p>In any case, the larger N is, the more trapezoids you use, the more accurate your approximation becomes. You can read more here about this so-called trapezoidal rule.</p> <p>With this in mind, write the function integral(f, a, b, N) that takes a Python function f (that itself takes one value x, a float, and returns a float), and two floats a and b, where a&lt;=b, and a positive int N, and uses the trapezoidal rule with N trapezoids to return the approximate area under the curve of f(x) where a &lt;= x &lt;= b. To be clear, in the case where N=1, this uses just one trapezoid, where the left edge is at (a, f(a)) and the right edge is at (b, f(b)), so the result is (b - a) * (f(a) + f(b))/2 (the width times the average height of the trapezoid).</p> <p>Hint: you should use almostEqual if you have your own tests or add any to our test function. Also, you'll probably want to use some very simple curves for testing, as we did in the test function, such as f(x)=x, f(x)=2x+3, and f(x)=2x**2, and then in ranges (a,b) with values of N such that you can fairly easily compute the expected answer by hand.</p> <p>Another hint: here is a basic example showing how functions work as parameters to other functions:</p> Text Only<pre><code>def f1(x): return x+1\ndef f2(x): return x+2\ndef h(f): return f(10)\nprint(h(f1)) # calls f1(10), prints 11\nprint(h(f2)) # calls f2(10), prints 12\n</code></pre> Python<pre><code>def integral(f, a, b, N):\n    width=(b-a)/N\n    total_area=0.5*(f(a)+f(b))\n    for i in range(1,N):\n        x=a+i*width\n        total_area+=f(x)\n    total_area*=width\n    return total_area\n</code></pre>"},{"location":"Self%20study/CMU-CS15112/hw2.html#part-b","title":"Part B","text":""},{"location":"Self%20study/CMU-CS15112/hw2.html#9-findzerowithbisection-15-pts","title":"9. findZeroWithBisection [15 pts]","text":"Text Only<pre><code>Aside: as we will cover more carefully later in the course, a function may take another function as an argument.  For example, consider this code:\ndef h(n):\n    return n+5\ndef f(g, x):\n    return 2*g(x)\nprint f(h,3) # prints 16\nHere, we define a function f whose first argument is another function.  On the last line, we call f providing the function h, which is bound in f to the parameter g.  Hence, calls to g in f are really calls to h.  Play around with the sample code to get the hang of this idea.  Then, read the next preliminary topic...\n\nIn mathematics, one way to numerically (as opposed to algebraically) find a zero of a function f(x) is to use what amounts to binary search.  To start, we need to know two values, x0 and x1, with x0&lt;x1, where f(x0) and f(x1) have different signs (so one is positive and the other is negative).  Hence, by the Intermediate Value Theorem, we know there is some value x in the range [x0,x1] such that f(x)=0.  It is that value of x that we are seeking.  How?  First, try the value xmid, which is the midpoint between x0 and x1.  If f(xmid) is exactly 0, we are done!  Otherwise, we can divide our range in half as such:  if f(xmid) and f(x0) are the same sign, use the range [xmid, x1].  Otherwise, f(xmid) and f(x1) must share the same sign, so use the range [x0, xmid].  We repeat this in a loop until x0 and x1 are within some suitably small epsilon.\n\nWith this in mind, write the function findZeroWithBisection that takes a function f, a float x0, a float x1, and a float epsilon, and returns an approximate value x in [x0,x1] where f(x) is approximately zero.  Your function should stop when x0 and x1 are within epsilon, and at that time should return the midpoint of that range.  Note that if it is not true that exactly one of f(x0) and f(x1) is negative, your function should return the Python value None, signifying that the bisection method cannot be used on the given range.\n\nLet's see this in action!  First, we'll use it to approximate the square root of 2 without the ** operator:\n\nprint \"use bisection to approximate sqrt(2):\"\ndef f1(x): return x*x - 2 # root at x=sqrt(2)\nx = findZeroWithBisection(f1, 0, 2, 0.000000001)\nprint \" x =\", x                # prints  x = 1.41421356192\nprint \" check: x**2 =\", (x*x)  # prints  check: x**2 = 1.99999999871 (really close!)\n\nNext, let's use it to approximate phi (the golden ratio), without using the closed-form solution ((1 + sqrt(5))/2), instead using the interesting property of phi that adding one to it is the same as squaring it.  That is, ((phi + 1) == phi**2).  How do use that?  Simple, convert it into an equation equal to 0:  phi**2 - (phi + 1) == 0.  Now we're set!  (Of course, we could just use the Quadratic Formula here, but it's more interesting to use bisection, now that we have it!).\n\nprint \"use bisection to approximate phi (the golden ratio):\"\ndef f2(x): return x**2 - (x + 1) # root at x=phi\nx = findZeroWithBisection(f2, 0, 2, 0.000000001)\nprint \" x =\", x                  # prints x = 1.61803398887\nphi = (1 + 5**0.5)/2             # the actual value (to within Python's floating point accuracy)\nprint \" check: x/phi =\", (x/phi) # prints check: check: x/phi = 1.00000000007 (nice!)\n\nThe previous two examples are nice, but simpler techniques than bisection would have worked as well.  So let's solve a problem that would be hard to solve without bisection (or some other numeric approximation algorithm).  Specifically, find a number x such that x5 == 2x:\n\nprint \"use bisection to approximate x where x**5 == 2**x\"\ndef f3(x): return x**5 - 2**x # f(1)&lt;0, f(2)&gt;0\nx = findZeroWithBisection(f3, 1, 2, 0.000000001)\nprint \" x =\", x                              # prints x = 1.17727855081\nprint \" check: x**5 - 2**x =\", (x**5 - 2**x) # prints check: x**5 - 2**x = 3.63570817896e-09 (great!)\n\nHopefully this bisection excursion helps you appreciate the awesome computational power that about 10 lines of Python can have!\n</code></pre> Python<pre><code>def findZeroWithBisection(f, x0, x1, epsilon):\n    if f(x0)*f(x1)&gt;=0:\n        return None\n    while (x1-x0)&gt;epsilon:\n        xmid=(x0+x1)/2.0\n        fmid=f(xmid)\n        if abs(fmid)&lt;epsilon:\n            return xmid\n        if fmid*f(x0)&lt;0:\n            x1=xmid\n        else:\n            x0=xmid\n    return (x0+x1)/2.0\n</code></pre>"},{"location":"Self%20study/CMU-CS15112/hw2.html#10","title":"10.","text":""},{"location":"Self%20study/NOAI2024-Training/index.html","title":"Lecture Notes","text":"<ol> <li>June 7, Data Analysis</li> <li>June 8, MNIST &amp; GAN</li> <li>June 9</li> </ol> <p>The test papers for Regional Round of NOAI 2024 is available for download here (zh-cn).</p>"},{"location":"Self%20study/NOAI2024-Training/June7.html","title":"June7","text":""},{"location":"Self%20study/NOAI2024-Training/June7.html#lecture-notes-of-noai-training","title":"Lecture Notes of NOAI Training","text":""},{"location":"Self%20study/NOAI2024-Training/June7.html#day-1-june-7-2024","title":"Day 1, June 7, 2024","text":""},{"location":"Self%20study/NOAI2024-Training/June7.html#1","title":"1. \u57fa\u7840\u5e93","text":"Python<pre><code>import torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport matplotlib\n%matplotlib inline\n</code></pre>"},{"location":"Self%20study/NOAI2024-Training/June7.html#2","title":"2. \u968f\u673a\u751f\u6210\u6570\u636e","text":"Python<pre><code>np.random.rand(200,1) # range &gt;0\nnp.random.randn(200,1) # range \u65e0\u9650\u5236\n[:X] # \u5012\u6570 X \u4f4d\n</code></pre>"},{"location":"Self%20study/NOAI2024-Training/June7.html#3-matplotlib","title":"3. matplotlib \u7ed8\u56fe\u51fd\u6570","text":"<p>X\uff1anumpy \u968f\u673a\u6570\u96c6\u5408 Y\uff1a\\(y=2x+1\\) \u83b7\u5f97\u6570\u503c\u96c6\u5408</p> Python<pre><code>def draw_data(X,Y):\n    plt.figure(figsize=(8,6))\n\n    plt.scatter(X,Y,color='blue',label='Data') # \u6563\u70b9\u56fe\n    plt.xlabel('X')\n    plt.ylabel('Y')\n    plt.title('Plot')\n\n    plt.legend()\n    plt.show()\n</code></pre>"},{"location":"Self%20study/NOAI2024-Training/June7.html#4","title":"4. \u8bad\u7ec3\u7ebf\u6027\u56de\u5f52\u6a21\u578b","text":"<p>\u6d41\u7a0b\uff1a</p> <ol> <li>\u6570\u636e\u9884\u5904\u7406\uff0c\u8f6c\u53d8\u4e3a tensor</li> <li>\u56fa\u5b9a\u968f\u673a\u79cd\u5b50</li> <li>\u5b9a\u4e49\u7ebf\u6027\u56de\u5f52\u6a21\u578b</li> <li>\u5b9a\u4e49\u635f\u5931\u51fd\u6570 MSE \u548c\u4f18\u5316\u5668 SGD</li> <li>\u8bad\u7ec3\u6a21\u578b\uff0c\u5171 100 \u4e2a epoch</li> <li>\u6bcf\u4e2a epoch \u8bb0\u5f55\u4e0b loss\uff0cweight \u548c bias\uff0c\u5206\u522b\u5b58\u653e\u5728\u5217\u8868\u4e2d</li> </ol> Python<pre><code># \u5b9a\u4e49\u7ebf\u6027\u56de\u5f52\u6a21\u578b\ndef __init__(self):\n    super(LinearRegressionModel,self).__init__()\n    self.linear=nn.Linear(1,1)\n\n# \u8bad\u7ec3\u51fd\u6570\nfor epoch in range(100):\n    model.train()\n    optimizer.zero_grad()\n\n    outputs=model(X_tensor)\n    loss=criterion(outputs,Y_tensor)\n\n    loss.backward()\n    optimizer.step()\n\n    losses.append(loss.item())\n    w_values.append(model.linear.weight.item())\n    b_values.append(model.linear.bias.item())\n    if epoch%10==0:\n        print(f'Epoch {epoch}, Loss: {loss.item()}')\n\n# \u5b9e\u73b0\u6d41\u7a0b\n\n## \u8f6c\u6362\u5f20\u91cf\nX_tensor=torch.tensor(X,dtype=torch.float32)\nY_tensor=#...\n\n## \u56fa\u5b9a\u968f\u673a\u79cd\u5b50\nset_seed(42)\n\n## \u5b9a\u4e49\u635f\u5931\u51fd\u6570\u548c\u4f18\u5316\u5668\ncriterion=nn.MSELoss()\noptimizer=optim.SGD(model.parameters(),lr=0.1)\n\n## \u8bad\u7ec3\u6a21\u578b\u5e76\u8bb0\u5f55\u635f\u5931\u503c\u548c\u53c2\u6570\u53d8\u5316\nlosses,w_values,b_values=train(model,optimizer,criterion,X_tensor,Y_tensor)\n\n# \u7ed8\u5236\u66f2\u7ebf\u56fe\n\ndef draw_loss(losses):\n    plt.figure(figsize=(8,6))\n    plt.plot(range(1,len(losses)+1),losses,color='blue',linestyle='-',linewidth=2)\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.title('Loss Iteration')\n    plt.show()\n</code></pre> \\[ \\text{MSE Expression Format: }\\text{MSE}(w,b)=\\dfrac{1}{N}\\sum^{N}_{i=1}(y_i-(wx_i+b))^2 \\] Python<pre><code>def draw_loss_contour (X, Y, w_values, b_values, w_true, b_true);\nplt. figure(figsize=(10, 6))\nw_min, w_max = [0, 3]\nb min, b_max = [0, 2.5]\nW_range = np.linspace(w_min, w_max, 100)\nb\n_range = np.linspace(b_min, b max, 100)\nW, B = np.meshgrid(w_range, b_range)\n\n# \u8ba1\u7b97\u6bcf\u4e2a\u7f51\u683c\u70b9\u7684\u635f\u5931\nL = np.zeros (W. shape)\nfor i in range (w. shape[0]) :\nfor j in range(w. shape[1]) :\nw_ij = W[i, j]\nb_ij = B[i, j]\nZ[i, j] = np.mean((Y - (w_ij* X + b_ij)) ** 2)\n\n# \u7ed8\u5236\u7b49\u9ad8\u7ebf\u548c\u53c2\u6570\u53d8\u5316\u8def\u5f84\nplt. contour (W, B, Z, Levels=50) plt. colorbar()\nplt.plot (w_values, b_values, color= red, marker=, linestyle=-, linewidth=2, markersize=s, label= 'Optimized Path')\nplt.scatter(w_values[0], b_values[0], color= black, marker=\u00d7, s=100, label='Initial Point')\nplt.scatter(w_true, b_true, color='black', marker= o, s=100, label='Ref Point')\nplt. xlabel('weight')\nplt. ylabel('Bias')\nplt.title(\"Plot\")\nplt.legend()\nplt.show()\n</code></pre>"},{"location":"Self%20study/NOAI2024-Training/June8.html","title":"June8","text":""},{"location":"Self%20study/NOAI2024-Training/June8.html#lecture-notes-of-noai-training","title":"Lecture Notes of NOAI Training","text":""},{"location":"Self%20study/NOAI2024-Training/June8.html#day-2-june-8-2024","title":"Day 2, June 8, 2024","text":""},{"location":"Self%20study/NOAI2024-Training/June8.html#1-mnist","title":"1. MNIST","text":"Python<pre><code># \u5b9a\u4e49\u6570\u636e\u96c6\ntest_dataset=FashionDataset(\n    datadir='FashionMNIST/raw',\n    transform=T.Compose([\n        T.ToTensor(),\n        T.Normalize((0.5,),(0.5,))\n    ]),\n    is_train=True\n)\n\n# \u5b9a\u4e49\u6d4b\u8bd5\u96c6\ntest_dataset=FashionDataset(\n    datadir='FashionMNIST/raw',\n    transform=T.Compose([\n        T.ToTensor(),\n        T.Normalize((0.5,),(0.5,))\n    ]),\n    is_train=False\n)\n\n# \u7f51\u7edc\u7ed3\u6784\ndef __init__(self):\n    super(LeNet,self).__init__()\n    self.conv1=nn.Conv2d(1,6,5,1,2)\n    self.pool1=nn.MaxPool2d(2,2)\n    self.conv2=nn.Conv2d(6,16,5)\n    self.pool2=nn.MaxPool2d(2,2)\n    self.fc1=nn.Linear(16*5*5,120)\n    self.fc2=nn.Linear(120,84)\n    self.fc3=nn.Linear(84,10)\n\n# \u524d\u5411\u4f20\u64ad\ndef forward(self,x):\n    x=F.relu(self.conv1(x))\n    x=self.pool1(x)\n    x=F.relu(self.conv2(x))\n    x=self.pool2(x)\n    x=x.view(x.size()[0],-1)\n    x=F.relu(self.fc1(x))\n    x=F.relu(self.fc2(x))\n    x=self.fc3(x)\n    return x\n\n# \u8bad\u7ec3\ndef train(epoch):\n    model.train()\n    total_loss=0\n    for iter,(data,target) in enumerate(train_loader):\n        opt.zero_grad()\n        output=model(data)\n        loss=loss_fn(output,target)\n        loss.backward()\n        opt.step()\n        total_loss+=loss.item()\n    total_loss/=len(train_loader)\n    print(f'Epoch: {epoch} Loss: {total_loss:.3f}')\n\n# \u6d4b\u8bd5\ndef test(epoch):\n    model.eval()\n    correct=0\n    tot=0\n    for data,target in test_loader:\n        output=model(data)\n        pred=[]\n        for i in range(output.size(0)):\n            max_index=0\n            max_value=output[i][0]\n            for j in range(1,output.size(1)):\n                if output[i][j]&gt;max_value:\n                    max_value=output[i][j]\n                    max_index=j\n            pred.append(max_index)\n    for i in range(len(pred)):\n        if pred[i]==target[i]:\n            correct+=1\n    tot+=data.shape[0]\nprint(f'Test Epoch: {epoch} Accuracy: {correct/tot*100:.2f}%')\n\n# \u8bad\u7ec3\u6a21\u578b\nfor epoch in range(10):\n    train(epoch)\n    test(epoch)\n</code></pre>"},{"location":"Self%20study/NOAI2024-Training/June8.html#2","title":"2. \u591a\u53d8\u91cf","text":"Python<pre><code># \u8bad\u7ec3\ndef train(epoch):\n    #...\n    #for...\n        output=model(data)\n        output=torch.sigmoid(output)\n\n# \u6d4b\u8bd5\ndef test(epoch):\n    #...\n    #for...\n        output=model(data)\n        output=torch.sigmoid(output)\n        _,output_indices=torch.topk(output,k=2,dim=-1,largest=True,sorted=True)\n        _,target_indices=torch.topk(target,k=2,dim=-1,largest=True,sorted=True)\n        output_indices=output_indices.numpy()\n        output_indices=target_indices.numpy()\n    #for...\n        if np.array_equal(output_indices[i],target_indices[i]):\n            correct+=1\n</code></pre>"},{"location":"Self%20study/NOAI2024-Training/June8.html#3-gan","title":"3. GAN \u751f\u6210\u5bf9\u6297\u7f51\u7edc","text":"<p>\u6d41\u7a0b\uff1a</p> <ol> <li>\u8bbe\u7f6e\u968f\u673a\u79cd\u5b50</li> <li>dataloader</li> <li>\u5224\u522b\u5668\u7f51\u7edc\u7ed3\u6784</li> <li>\u751f\u6210\u5668\u7f51\u7edc\u7ed3\u6784</li> <li>\u5b9e\u4f8b\u5316\u5224\u522b\u5668\u548c\u751f\u6210\u5668</li> <li>\u4f7f\u7528\u672a\u8bad\u7ec3\u7684\u751f\u6210\u5668\u751f\u6210\u6570\u636e\u5e76\u53ef\u89c6\u5316</li> <li>\u8d85\u53c2\u6570</li> <li>\u635f\u5931\u51fd\u6570</li> <li>\u4f18\u5316\u5668\u8bbe\u7f6e</li> <li>\u8bad\u7ec3\u5224\u522b\u5668\u548c\u751f\u6210\u5668</li> <li>\u6a21\u578b\u6d4b\u8bc4</li> </ol> \\[ \\text{nn.Linear}\\leftarrow\\text{2D}\\\\ \\text{nn.Linear}\\rightarrow\\text{nn.ReLU}\\rightarrow\\text{nn.Dropout}\\\\ \\text{nn.Linear 2D}\\rightarrow\\text{1D} \\]"},{"location":"Self%20study/NOAI2024-Training/June9.html","title":"June9","text":""},{"location":"Self%20study/NOAI2024-Training/June9.html#lecture-notes-of-noai-training","title":"Lecture Notes of NOAI Training","text":""},{"location":"Self%20study/NOAI2024-Training/June9.html#day-3-june-9-2024","title":"Day 3, June 9, 2024","text":""},{"location":"Self%20study/NOAI2024-Training/June9.html#1-dataset","title":"1. Dataset","text":"Python<pre><code># \u81ea\u5b9a\u4e49 Dataset\ndef __init__(self,reviews,labels):\n    self.reviews=torch.tensor(reviews,dtype=torch.long)\n    self.labels=torch.tensor(labels,dtype=torch.float32)\n\ndef __len__(self):\n    return len(self.reviews)\n\ndef __getitem__(self):\n    return self.reviews[idx],self.labels[idx]\n\n# \u5b9a\u4e49 LSTM\ndef __init__(self,vocab_size,embedding_dim,hidden_dim,output_dim,pad_idx,dropout=0.5):\n    super().__init__()\n    self.pad_idx=pad.idx\n    self.embedding=nn.Embedding(vocab_size,embedding_dim\uff0cpadding_idx=pad_idx)\n    self.lstm=nn.LSTM(\n        embedding_dim,\n        hidden_dim,\n        num_layers=2,\n        batch_first=True,\n        bidirectional=True,\n        dropout=dropout,\n    )\n    self.fc=nn.Linear(hidden_dim*2,output_dim)\n    self.dropout=nn.Dropout(dropout)\n\ndef forward(self,text):\n    embedded=self.dropout(self.embedding(text))\n    lengths=(text!=self.pad_idx).sum(dim=1)\n    embedded=pack_padded_sequence(embedded,lengths.cpu(),batch_first=True,enforce_sorted=False)\n    packed_output,(hidden,cell)=self.lstm(embedded)\n    hidden=self.dropout(torch.cat((hidden[-2,:,:],hidden[-1,:,:]),dim=1))\n    return self.fc(hidden).squeeze(1)\n\n# \u8bad\u7ec3\ndef train(model,dataloader,optimizer,criterion):\n    epoch_loss=0\n    epoch_acc=0\n    model.train()\n    for texts,labels in tqdm(dataloader):\n        texts,labels=texts.to(device),labels.to(device)\n        optimizer.zero_grad()\n        predictions=model(texts)\n        loss=criterion(predictions,labels)\n        loss.backward()\n        optimizer.step()\n        epoch_loss+=loss.item()\n        epoch_acc+=acc.item()\n    return epoch_loss/len(dataloader),epoch_acc/len(dataloader)\n\n# \u6a21\u578b\u8bc4\u4f30\ndef evaluate(model,dataloader,criterion):\n    epoch_loss=0\n    epoch_acc=0\n    model.eval()\n    with torh.no_grad():\n        for texts,labels in tqdm(dataloader):\n            texts,labels=texts.to(device),labels.to(device)\n            predictions=model(texts)\n            loss=criterion(predictions,labels)\n            acc=binary_accuracy(predictions,labels)\n            epoch_loss+=loss.item()\n            epoch_acc+=acc.item()\n    return epoch_loss/len(dataloader),epoch_acc/len(dataloader)\n\n# \u9884\u6d4b\ndef predict_sentiment(model,sentence,min_len=5):\n    model.eval()\n    tokenized=word_tokenize(sentence.lower())\n    if len(tokenized)&lt;min_len:\n        tokenized+=[\"&lt;pad&gt;\"]*(min_len-len(tokenized))\n    indexed=[word2idx.get(word,word2idx[\"unk\"]) for word in tokenized]\n    tensor=torch.LongTensor(indexed).to(device).unsqueeze(0)\n    prediction=torch.sigmoid(model(tensor))\n    pred_label=idx2label[1] if prediction.item()&gt;=0.5 else idx2label[0]\n    return pred_label\n</code></pre>"},{"location":"Self%20study/NOAI2024-Training/June9.html#2-lab","title":"2. Lab","text":"Python<pre><code>def load_data(csv_path=\"...\"):\n    txyz=pd.read_csv(csv_path)\n    t=np.array(txyz[\"timestamp\"])\n    x=np.array(txyz[\"x\"])\n    y=np.array(txyz[\"y\"])\n    z=np.array(txyz[\"z\"])\n    return t,x,y,z\n\ndef derivative(t,x,y,z):\n    dxdt=(x[1:]-x[:-1])/(t[1:]-t[:-1])\n    dydt=(y[1:]-y[:-1])/(t[1:]-t[:-1])\n    dzdt=(z[1:]-z[:-1])/(t[1:]-t[:-1])\n    return dxdt,dydt,dzdt\n\ndef plot2d_data(x,y,img_path):\n    fig=plt.figure()\n    ax=fig.add_subplot()\n    ax.plot(x,y,lw=1,c=\"dimgrey\")\n    plt.savefig(img_path,bbox_inches=\"tight\")\n    plt.show()\n    pla.cla()\n    plt.close(\"all\")\n</code></pre>"},{"location":"Self%20study/Stanford-CS142/index.html","title":"Stanford CS142","text":"<p>On this page, I will record all the lecture notes on the Stanford CS142 course.</p>"},{"location":"Self%20study/Stanford-CS142/Lectures/lecture2.html","title":"Lecture 2: HyperText Markup Language (HTML)","text":"<p>HTML as a Markup language</p> <ul> <li> <p>markup language: include directives with content</p> </li> <li> <p>tags: html uses <code>&lt;&gt;</code> to denote tags (tags can have tags inside to form a tree)</p> </li> </ul> <p>example XHTML doc</p> HTML<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;p&gt;Hello world!&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li>basic syntax rules for XHTML:</li> </ul> HTML<pre><code>&lt;img src=\"face.jpg\"&gt;\n&lt;input type=\"text\" value=\"94301\" name=\"zip\"&gt;\n&lt;div class=\"header\"&gt;\n</code></pre> <ul> <li>handle markup characters in content:</li> </ul> Alternative Original <code>&amp;lt;</code> <code>&lt;</code> <code>&amp;gt;</code> <code>&gt;</code> <code>&amp;amp;</code> <code>&amp;</code> <code>&amp;quot;</code> <code>\"</code> <code>&amp;nbsp;</code> <code>nonbreaking space</code> <ul> <li>common used XHTML tags</li> </ul> Expression Interpretation <code>&lt;table&gt;, &lt;tr&gt;, &lt;td&gt;</code> Tables <code>&lt;ul&gt;, &lt;li&gt;</code> Unordered list (with bullets) <code>&lt;ol&gt;, &lt;li&gt;</code> Ordered list (numbered) <code>&lt;div&gt;</code> Used for grouping related elements, where the group occupies entire lines (forces a line break before and after) <code>&lt;span&gt;</code> Used for grouping related elements, where the group is within a single line (no forced line breaks) <code>&lt;form&gt;, &lt;input&gt;, &lt;textarea&gt;, &lt;select&gt;, ...</code> Used to create forms where users can input data <p>HTML differences from XHTML</p> <p>HTML supports the same tags, same features, but allows quirkier syntax:</p> <ul> <li> <p>Can skip some end tags, such as <code>&lt;/br&gt;</code>, <code>&lt;/p&gt;</code></p> </li> <li> <p>Not all attributes have to have values: <code>&lt;select multiple&gt;</code></p> </li> <li> <p>Elements can overlap: <code>&lt;p&gt;&lt;b&gt;first&lt;/p&gt;&lt;p&gt;second&lt;/b&gt; third&lt;/p&gt;</code></p> </li> </ul> <p>new HTML 5 features</p> <ul> <li>Additions tags to allow content definition<ul> <li><code>&lt;article&gt;, &lt;section&gt;, &lt;header&gt;, &lt;footer&gt;, &lt;summary&gt;, &lt;aside&gt;, &lt;details&gt;</code></li> <li><code>&lt;mark&gt;, &lt;figcaption&gt;, &lt;figure&gt;</code></li> <li><code>&lt;nav&gt;, &lt;menuitem&gt;</code></li> </ul> </li> <li>Drawing<ul> <li><code>&lt;svg&gt;</code> - Scalable Vector Graphics - Draw shapes</li> <li><code>&lt;canvas&gt;</code> - Draw from JavaScript - 3D with WebGL</li> </ul> </li> <li>Timed media playback: <code>&lt;video&gt;</code> and <code>&lt;audio&gt;</code></li> </ul>"},{"location":"Self%20study/Stanford-CS142/Lectures/lecture3.html","title":"Lecture 3: Cascading Style Sheets (CSS)","text":"<p>Driving problem behind CSS</p> <ul> <li>with no css, the fonts are generated directly by system default settings</li> </ul> <p>style sheets</p> <p>Are used to:</p> <ul> <li> <p>Specify style to use rather than browser default.</p> </li> <li> <p>Not have to code styling on every element.</p> </li> </ul> <p>key concept: separate style from content</p> <p>Content (what to display) is in HTML files</p> <p>Formatting information (how to display it) is in separate style sheets (.css files).</p> <p>Use an element attribute named class to link (e.g. ) <p>Result: define style information once, use in many places</p> <ul> <li>css rules:</li> </ul> CSS<pre><code>body { /* selector */\n    font-family: Tahoma, Arial, sans-serif;\n    color: black;\n    background: white;\n    margin: 8px; /* property: value  */\n}\n</code></pre> <ul> <li>css selector:</li> </ul> CSS Selector CSS HTML Tag name <code>h1 { color: red; }</code> <code>&lt;h1&gt;Today\u2019s Specials&lt;/h1&gt;</code> Class attribute <code>.large { font-size: 16pt; }</code> <code>&lt;p class=\"large\"&gt;...</code> Tag and Class <code>p.large {...}</code> <code>&lt;p class=\"large\"&gt;...</code> Element id <code>#p20 { font-weight: bold; }</code> <code>&lt;p id=\"p20\"&gt;...</code> <ul> <li>css psuedo selectors:</li> </ul> <p><code>hover</code>: apply this rule when mouse is hovering over element:</p> CSS<pre><code>p: hover, a: hover {\n    background-color: yellow;\n}\n</code></pre> <p><code>link/visited</code>: apply this rule when link has been visited:</p> CSS<pre><code>a:visited {\n    color: purple;\n}\n\na:link {\n    color: blue;\n}\n</code></pre> <ul> <li>color uses rgb:</li> </ul> CSS<pre><code>h1 {\n    color: #ff0000;\n    color: rgb(255, 255, 0);\n    color: rgb(80%, 80%, 100%);\n}\n</code></pre> <ul> <li>css box model:</li> </ul> <p>Total element width = width + left padding + right padding + left border + right border + left margin + right margin</p> <pre><code>graph LR\n  A[Total element width =] --&gt; B[width];\n  A --&gt; C[left padding];\n  A --&gt; D[right padding];\n  A --&gt; E[left border];\n  A --&gt; F[right border];\n  A --&gt; G[left margin];\n  A --&gt; H[right margin];</code></pre> <ul> <li>size properties:</li> </ul> CSS<pre><code>width - Override element defaults\nheight\npadding-top\npadding-right\npadding-bottom\npadding-left\nmargin-top\nmargin-right\nmargin-bottom\nmargin-left\nborder-bottom-color\nborder-bottom-style\nborder-bottom-width\nborder-left-color\nborder-left-style\nborder-left-width\nborder-right-color\nborder-right-style\nborder-right-width\n</code></pre> <ul> <li>position properties:</li> </ul> CSS<pre><code>position: static; /* (default) - Position in document flow */\nposition: relative; /* Position relative to default position via top, right, bottom, and left properties */\nposition: fixed; /* Position to a fixed location on the screen via top, right, bottom, and left properties */\nposition: absolute; /* Position relative to ancestor absolute element via top, right, bottom, and left properties */\n/* Fixed position (0,0) is top left corner */\n</code></pre> <ul> <li>common properties:</li> </ul> CSS<pre><code>background-image: /* image for element's background */\nbackground-repeat: /* should background image be displayed in a repeating pattern (versus once only) */\nfont, font-family, font-size, font-weight, font-style: /* font information for text\ntext-align, vertical-align: /* Alignment: center, left, right */\n/* cursor - Set the cursor when over element (e.g. help) */\n</code></pre> <ul> <li>element visibility control properties:</li> </ul> CSS<pre><code>display: none; /* Element is not displayed and takes no space in layout */\ndisplay: inline; /* Element is treated as an inline element */\ndisplay: block; /* Element is treated as a block element */\ndisplay: flex; /* Element is treated as a flex container */\ndisplay: grid; /* Element is treated as a grid container */\nvisibility: hidden; /* Element is hidden but space still allocated */\nvisibility: visible; /* Element is normally displayed */\n</code></pre> <ul> <li>some css featured issues: multiple rule matches: most specific rule wins</li> </ul> HTML<pre><code>&lt;span&gt;Text1&lt;/span&gt; &lt;!-- red --&gt;\n&lt;span class=\"test\"&gt;Text2&lt;/span&gt; &lt;!-- green --&gt;\n</code></pre> CSS<pre><code>span.test { color: green }\nspan { color: red }\n</code></pre> <ul> <li>add styles to HTML</li> </ul> HTML<pre><code>&lt;!-- #1 --&gt;\n&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\" /&gt;\n\n&lt;!-- #2 --&gt;\nbody {\n    font-family: Tahoma, Arial, sans-serif;\n}\n\n&lt;!-- #3 --&gt;\n&lt;div style=\"padding:2px; ... \"&gt;\n</code></pre> <ul> <li>sample css file:</li> </ul> CSS<pre><code>body {\n    font-family: Tahoma, Arial, sans-serif;\n    font-size: 13px;\n    color: black;\n    background: white;\n    margin: 8px;\n}\nh1 {\n    font-size: 19px;\n    margin-top: 0px;\n    margin-bottom: 5px;\n    border-bottom: 1px solid black;\n}\n.shaded {\n    background: #d0d0ff;\n}\n</code></pre>"},{"location":"Self%20study/Stanford-CS142/Lectures/lecture4.html","title":"Lecture 4: Universal Resource Locator (URL)","text":"<ul> <li>hypertext: text with links to other text</li> </ul> HTML<pre><code>&lt;a href=\"https://en.wikipedia.org/wiki/URL\"&gt;URL&lt;/a&gt;\n</code></pre> <p>parts of an URL: <code>http://www.company.com:80/a/b/c.html?user=Alice&amp;year=2008#p2</code></p> <ol> <li>scheme (<code>http://</code>): the protocal</li> <li>host name (<code>www. ... .com</code>): name of the machine to connect to</li> <li>server's host number (<code>80</code>): allows multiple servers to run on the same machine</li> <li>hierarchical portion (<code>/a/b/c.html</code>): find content</li> <li>query parameters (<code>?user=Alice&amp;year=2008</code>): provides additional parameters</li> <li>fragment (<code>#p2</code>): browser scroll page to fragment</li> </ol> <p>URL schemes</p> <ol> <li><code>http</code>: most common scheme, HTTP Protocal</li> <li><code>https</code>: similar to <code>http</code></li> <li><code>file</code>: read a file from local</li> <li><code>websocket</code>: create a TCP connection</li> <li><code>mailto</code>: open an email program and compose a message</li> </ol> <p>query parameters</p> <ul> <li>traditionally used as: <code>?order=</code>, <code>?query=</code>, <code>?theme=</code>.</li> </ul> <p>links</p> <ul> <li>implemented with the <code>&lt;a&gt;</code> tag: <code>&lt;a href=\"http://www.company.com/news/2009.html\"&gt;2009 News&lt;/a&gt;</code></li> </ul> <p>URLs</p> <ol> <li>full URL: <code>&lt;a href=\"http://www.xyz.com/news/2009.html\"&gt;2009 News&lt;/a&gt;</code></li> <li>absolute URL: <code>&lt;a href=\"/stock/quote.html\"&gt;</code></li> <li>relative URL: <code>&lt;a href=\"2008/March.html\"&gt;</code></li> <li>define an anchor point: <code>&lt;a name=\"sec3\"&gt;</code></li> <li>move to an anchor point: <code>&lt;a href=\"#sec3\"&gt;</code></li> </ol> <p>uses of URLs</p> <ol> <li>load images: <code>&lt;img src=\"...\" /&gt;</code></li> <li>load stylesheets: <code>&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"...\"&gt;</code></li> <li>embed a page: <code>&lt;iframe src=\"http://www.google.com\"&gt;</code></li> </ol> <p>URL encoding</p> <ol> <li>all punctuations must be replaced by <code>%xx</code>, where <code>xx</code> is a hexadecimal value of the character.</li> </ol>"},{"location":"Self%20study/Stanford-CS142/Lectures/lecture5.html","title":"Lecture 5: JavaScript Basics","text":"<p>What is JS?</p> <ul> <li>dynamic, untyped, interpreted language</li> <li>prototype-based</li> <li>object-oriented</li> <li>has an API</li> </ul> <p>variable scoping</p> JavaScript<pre><code>var globalVar;\nfunction foo() {\n    var localVar;\n    if (globalVar &gt; 0) {\n        var localVar2 = 2;\n    }\n    // localVar2 is valid here\n}\n</code></pre> <p>var scoping confusions</p> JavaScript<pre><code>console.log('Val is:', val); //Syntax error\n//...\nfor(var i = 0; i &lt; 10; i++) {\n    var val = \"different string\"; // Hoisted to func start, but works\n}\n</code></pre> <p><code>number</code> type</p> <ul> <li>\\(\\text{MAX_INT}=(2^{53}-1)=9007199254740991\\)</li> <li>\\(1/0=\\text{Infinity}\\)</li> <li>\\(\\text{Math.sqrt(-1)}=\\text{NaN}\\)</li> </ul> <p>special cases</p> <p><code>(0.1 + 0.2) == 0.3</code> is <code>false</code></p> <p>Bitwise operators (e.g. <code>~, &amp;, |, ^, &gt;&gt;, &lt;&lt;, &gt;&gt;&gt;</code>) are 32bit.</p> <p>properties</p> JavaScript<pre><code>let foo = {};\nlet bar = {name: \"Alice\", age: 23, state: \"California\"};\nlet x = { \"\": \"empty\", \"---\": \"dashes\"};\n</code></pre> JavaScript<pre><code>//add\nlet foo = {};\nfoo.name = \"Fred\";\n\n//remove\nlet foo = {name: \"Fred\"};\ndelete foo.name;\n\n//enumerate\nObject.keys({name: \"Alice\", age: 23}) = [\"name\", \"age\"]\n</code></pre> <p>array</p> JavaScript<pre><code>let anArr = [1,2,3];\nanArr[5]='FooBar'; //[1,2,3,,,'FooBar']\n</code></pre> <p>dates</p> JavaScript<pre><code>let date = new Date();\n//date.valueOf() = 1452359316314\n//date.toISOString() = '2016-01-09T17:08:36.314Z'\n//date.toLocaleString() = '1/9/2016, 9:08:36 AM'\n</code></pre> <p>exceptions - try/catch</p> JavaScript<pre><code>try {\n    nonExistentFunction();\n} catch (err) { // typeof err 'object'\n    console.log(\"Error call func\", err.name, err.message);\n}\n</code></pre> <p>exceptions - throw/finally</p> JavaScript<pre><code>try {\n    throw \"Help!\";\n} catch (errstr) { // errstr === \"Help!\"\n    console.log('Got exception', errstr);\n} finally {\n    // This block is executed after try/catch\n}\n</code></pre> <p>js in web page</p> HTML<pre><code>&lt;!-- file --&gt;\n&lt;script type=\"text/javascript\" src=\"code.js\"&gt;&lt;/script&gt;\n\n&lt;!-- inline --&gt;\n&lt;script type=\"text/javascript\"&gt;\n//&lt;![CDATA[\n    //Javascript goes here...\n//]]&gt;\n&lt;/script&gt;\n</code></pre>"},{"location":"Self%20study/Stanford-CS142/Projects/project1.html","title":"Project 1: HTML and CSS","text":"<p>Haven't completed all the works due to the course settings.</p>"},{"location":"Self%20study/Stanford-CS142/Projects/project1.html#a","title":"A","text":""},{"location":"Self%20study/Stanford-CS142/Projects/project1.html#css-part","title":"CSS part","text":"CSS<pre><code>/* General styling for the body to ensure centering */\nbody {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n    font-family: Tahoma;\n    font-size: 40px;\n}\n\n/* Container to hold the boxes and ensure they are equally spaced vertically */\n.container {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    height: 90vh;\n    width: 100%; /* Ensures container spans full width */\n}\n\n/* General box styling */\n.box {\n    width: 100px;\n    height: 100px;\n    text-align: center;\n    border-top: 1px solid #687291;\n}\n\n/* Alternating box colors */\n.box:nth-child(odd) {\n    background-color: #dfe1e7;\n}\n\n.box:nth-child(even) {\n    background-color: #eeeff2;\n}\n\n/* Styling for the last box */\n.box:last-child {\n    background-color: #687291;\n    color: white; /* Ensures text is visible on darker background */\n    border: 4px solid black;\n\n}\n</code></pre>"},{"location":"Self%20study/Stanford-CS142/Projects/project1.html#html-part","title":"HTML part","text":"HTML<pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/&gt;\n    &lt;title&gt;Project1-A&lt;/title&gt;\n    &lt;link href=\"styleA.css\" rel=\"stylesheet\" type=\"text/css\"&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div class=\"box\"&gt;\n        &lt;p&gt;A&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"box\"&gt;\n        &lt;p&gt;B&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"box\"&gt;\n        &lt;p&gt;C&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"box\"&gt;\n        &lt;p&gt;D&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"box\"&gt;\n        &lt;p&gt;E&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"box\"&gt;\n        &lt;p&gt;F&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Self%20study/Stanford-CS142/Projects/project1.html#b","title":"B","text":""},{"location":"Self%20study/Stanford-CS142/Projects/project1.html#css-part_1","title":"CSS Part","text":"CSS<pre><code>body {\n    margin: 0;\n    padding: 0;\n    font-family: Tahoma;\n    display: flex;\n    position: relative;\n}\n\n.box {\n    width: 100px;\n    height: 150px;\n    background-color: #eeeff2;\n    border-left: 10px dotted #D0D0FF;\n    margin-right: 10px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 40px;\n    color: goldenrod;\n    cursor: pointer;\n    padding-left: 10px;\n    box-sizing: border-box;\n}\n\n.box:hover {\n    background-color: yellow;\n    color: goldenrod;\n}\n\n.last-box {\n    position: absolute;\n    right: 0;\n    bottom: 0;\n    margin-right: 10px; /* Remove the right margin for the last box */\n}\n\n/* Prevent wrapping */\nbody {\n    white-space: nowrap;\n}\n</code></pre>"},{"location":"Self%20study/Stanford-CS142/Projects/project1.html#html-part_1","title":"HTML Part","text":"HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Box Layout&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"styleB.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"box\"&gt;A&lt;/div&gt;\n    &lt;div class=\"box\"&gt;B&lt;/div&gt;\n    &lt;div class=\"box\"&gt;C&lt;/div&gt;\n    &lt;div class=\"box\"&gt;D&lt;/div&gt;\n    &lt;div class=\"box\"&gt;E&lt;/div&gt;\n    &lt;div class=\"box last-box\"&gt;F&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Self%20study/biology/lecture1.html","title":"Lecture1","text":"<p>\u547c\u5438\uff1a</p> \\[ \\text{O}_2+\\text{\u6709\u673a\u7269}\\overset{\u9176}{\\longrightarrow}\\text{CO}_2+\\text{H}_2\\text{O}+\\text{\u80fd\u91cf} \\] <p>\u9057\u4f20\u5b66\u539f\u7406\u7684\u6742\u4ea4\u6c34\u7a3b\u80b2\u79cd\uff1a\u53ef\u63d0\u9ad8\u7cae\u98df\u4ea7\u91cf\u3002</p> <ul> <li>\u751f\u7269\u5b66\u539f\u7406\uff1a\u9057\u4f20\u5b66\u6742\u79cd\u4f18\u52bf\u539f\u7406</li> </ul> <p>\u57fa\u56e0\u7f16\u8f91\uff1a</p> <ul> <li>\u65e9\u671f\uff1a\u5c06\u8bbe\u8ba1\u597d\u7684DNA\u7247\u6bb5\u8f6c\u5165\u7ec6\u80de\u6838\u4e2d</li> <li>\u57fa\u56e0\u7f16\u8f91\u6280\u672f\uff1a\u7279\u5b9a\u5de5\u5177\u91cd\u65b0\u7f16\u8f91DNA\u9057\u4f20\u4fe1\u606f\uff0c\u6539\u53d8\u751f\u7269\u5b66\u6027\u72b6\u3002\uff08\u57fa\u56e0\u51b3\u5b9a\u6027\u72b6\uff09</li> </ul> <p>\u514d\u75ab\u6cbb\u7597\uff1a</p> <ul> <li>\u4f20\u7edf\uff1a\u624b\u672f\u3001\u653e\u7597\u3001\u5316\u5b66\u836f\u7269</li> <li>CAR-T\uff1a\u5d4c\u5408\u6297\u539f\u53d7\u4f53T\u7597\u6cd5</li> </ul>"},{"location":"blog/index.html","title":"Blog","text":""},{"location":"blog/some_reflections_on_my_18th_birthday.html","title":"Some reflections on my 18<sup>th</sup> birthday","text":"<p>Disclaimer: It is not mere whining without reason.</p> <p>I\u2019ve gradually stopped obsessing over classes I classified as unnecessary and have immersed myself in books that sparked my interest in the past 2 years. I feel like the most rebellious one in a system that operates in a predictable (if not stifling) manner. Just like how some birds have an extra layer of ultraviolet-sensitive cells in their eyes, reading has given me an additional perspective to understand the world beyond what those around me perceive. I\u2019m not sure whether I would regret dropping the chance to listen to and participate in those classes (and the same question occurred to me when I chose to attend the current school). But after all, these are the problems I may never find the answer to. I\u2019m doing just fine.</p>"},{"location":"blog/archive/2024.html","title":"Sep 2024","text":""}]}